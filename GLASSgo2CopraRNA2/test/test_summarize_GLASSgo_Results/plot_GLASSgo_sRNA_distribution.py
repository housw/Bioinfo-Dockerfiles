#!/usr/bin/env python


# Copyright (C) <2018>  Shengwei Hou <housw2010'at'gmail'dot'com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.


import sys
import os
import argparse
from collections import Counter
from ete3 import Tree, faces, TreeStyle, add_face_to_node, TextFace, AttrFace, CircleFace


def my_layout(node):
    """ This function set the rules that control how nodes are drawn"""

    node.img_style['size'] = 1
    node.img_style['shape'] = 'square'
    node.img_style['fgcolor'] = 'green'
    bubble_face = CircleFace(node.count, 'steelblue', 'sphere')
    bubble_face.opacity = 0.6
    add_face_to_node(bubble_face, node, column=1, position='float-behind')
    #add_face_to_node(AttrFace('dist', fsize=7, fgcolor='red'), node, column=0, position='branch-top')
        
    #if node.up and not node.up.up:
    #    node.img_style['vt_line_width'] = 3
    #    node.img_style['hz_line_width'] = 4

    node.img_style["vt_line_type"] = 1

    # Text labels can also be added to the image
    faces.add_face_to_node(faces.TextFace(node.sci_name, fsize=36, fgcolor='black'), \
                               node=node, column=0, aligned=True)

    faces.add_face_to_node(faces.TextFace("Count: %s" %node.count), \
                               node=node, column=1, aligned=True)


rev_dict = {"A": "T",
            "T": "A",
            "C": "G",
            "G": "C",
            "N": "N"
              }


class Fasta(object):

    def __init__(self, header, seq):
        self.header = header
        self.seq = seq.upper()

    def get_gc_content(self):
        ret = 0
        if len(self.seq) == 0:
            return ret
        for c in self.seq:
            if c == "G" or c == "C":
                ret += 1
        return float(ret)/len(self.seq)

    def __str__(self):
        return ">"+self.header+"\n"+self.seq+"\n"


def parse_fasta(fasta_file):
    """
    :param fasta_file: input fasta file
    :return:           yield Fasta record as a generator
    """
    header = ""
    seq = []
    with open(fasta_file, "r") as ih:
        for line in ih:
            if line.startswith(">"):
                if header:
                    yield Fasta(header, "".join(seq))
                header = line.strip()[1:]
                seq = []
            else:
                seq.append(line.strip())
        yield Fasta(header, "".join(seq))


def get_taxid_from_GLASSgo_sRNAs(GLAssgo_result):
    """ a sample of GLASSgo output: 
        >HG001_02899
        CGTATACAAGGATAAAGCTTATAACAGTAGTAATTGTTGCTATCAAACGAACAACATATATTCTATTTTCAGATAGCAA
        >HE681097.1:c736762-736685 Staphylococcus aureus subsp. aureus HO 5096 0412 complete genome-p.c.VAL:96.25%-taxID:1074252
        ATATACAAGGATAAAGCTTATAACAGTAGTAATTGTTGCTATCAAACGAACAACATATATTCTATTTTCAGATAGCAA
    """
    taxids = []
    for sRNA in parse_fasta(GLAssgo_result):
        header = sRNA.header
        if "taxID:" in header:
            taxid = header.strip().split("taxID:")[-1]
            taxids.append(taxid)
    taxa2count = dict(Counter(taxids))
    return taxa2count




def main():

    # main parser
    parser = argparse.ArgumentParser(description="plot phylogenetic distribution of GLASSgo output")
    parser.add_argument("input_file", help="input sRNA in fasta format generated by GLASSgo")
    parser.add_argument("-p", "--prefix", help="output prefix")
    parser.add_argument("-o", "--out_folder", help="output directory, default=./", default="./")
    parser.add_argument("-f", "--force", action="store_true", help="force to overwrite the output")
    parser.add_argument("-v", "--version", action="version", version="%(prog)s 1.0")

    # show usage
    if len(sys.argv) < 2:
        sys.stderr.write("\nError: Not enough parameters were provided, please refer to the usage.\n")
        sys.stderr.write(parser.format_help())
        sys.exit(1)

    # parse args
    args = parser.parse_args()

    # input and output handling
    if args.prefix:
        prefix = args.prefix
        out_file = os.path.join(args.out_folder, prefix+".pdf")
    else:
        basename = os.path.basename(args.input_file)
        prefix = os.path.splitext(basename)[0]
        out_file = os.path.join(args.out_folder, prefix+".pdf")

    if os.path.exists(out_file):
        if args.force:
            print("Warning: output file exists, will be overwritten!")
        else:
            sys.stderr.write("Error: output file detected, please remove it or use --force option to overwrite it")

    # do the job
    taxa2count = get_taxid_from_GLASSgo_sRNAs(args.input_file)
    taxids = taxa2count.keys()
    print(taxids)

    # 
    from ete3 import NCBITaxa
    ncbi = NCBITaxa()
    tree = ncbi.get_topology(taxids)

    for leaf in tree.iter_leaves():
        leaf.add_features(count=taxa2count.get(leaf.name, 0))
    
    for node in tree.traverse("postorder"):
        count = 0
        if node.is_leaf():
            continue
        else:
            children = node.get_children()
            for child in children:
                count += child.count
        node.add_features(count=count)

    #print(tree.get_ascii(attributes=["sci_name", "taxid", "rank", "count"]))

    ts = TreeStyle()
    ts.layout_fn = my_layout
    ts.show_leaf_name = True
    ts.mode = 'c'
    ts.arc_start = 0
    ts.arc_span = 350
    ts.scale = 100

    tree.render(out_file,tree_style=ts)






if __name__ == "__main__":
    main()

